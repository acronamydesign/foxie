var stylus = require("stylus"),
		colors = require("colors"),
		path = require("path"),
		fs = require("fs"),
		chokidar = require('chokidar'),
		cleanCSS = require('clean-css')

//I wrote this when very sleepy

module.exports = function(themePath,stylRes,buildPaths){

var options = buildPaths.options.styles

	//Watcher TODO LOOK AT STRINGS BEHAVIOR
		if(typeof buildPaths.dest == "object"){

			var stylesDest = path.join(themePath,buildPaths.dest.styles)

			//not sure that its correct!!
			var watcher = chokidar.watch(buildPaths.src,{
				ignored: /[\/\\]\./,
			})
		}
		if(typeof buildPaths.dest == "string"){

			var stylesDest = path.join(themePath,buildPaths.dest)

			var watcher = chokidar.watch(buildPaths.src,{
				ignored: /[\/\\]\./,
			})
		}

	if(options.index){
		var mainFile = path.join(themePath,options.index)
	}

	function compileMain(){
		if(options.index){
			var mainFile = path.join(themePath,options.index)
			compile(mainFile,stylesDest)
		}
	}
	compileMain()


		watchCompile(watcher)

		function watchCompile(watcher){

			watcher.on("ready", function(path){
				console.log(colors.magenta("["+themePath.split("/").pop()+"] Foxie is watching '/"+buildPaths.src.split("/").pop()+"' for changes."))

				watcher.on("add", function(path){
					var ext = path.split("/").pop().split(".").pop()
					if(ext == "styl") compile(path,stylesDest)
					console.log("add: ", path)
				})

			})
			.on("change", function(path){
				var ext = path.split("/").pop().split(".").pop()
				if(ext == "styl"){
					console.log(colors.yellow("Compiling changes"))
					compile(path,stylesDest)
					compileMain()
				}
			})

		}


	for(s in stylRes){

		var rosolve = stylRes[s].replace(themePath,""),
				testBase = rosolve.split("/")[1]

		var resolveSrc = buildPaths.src.replace(themePath,""),
				testSrcBase = resolveSrc.split("/")[1]

		var fileName = stylRes[s].split("/").pop(),
				themeName = themePath.split("/").pop()

		function compile(file,stylesDest,mode){
			var str = fs.readFile(file,"utf8",function(err,res){
				if(err) console.log(colors.red("file "+file +" not found"))
				var compiled = stylus(res)
					//debugging in console
					.set("filename",file)
					//render
					.render(function(err,css){
					if(err) console.log(colors.red("["+themeName+"]"),err)
					//write
					var newFileName = file.split("/").pop().split(".")[0]+".css"

					//compression settings
					if(options.compress){
						css = new cleanCSS().minify(css).styles
					}
					var newFileName = file.split("/").pop().split(".")[0]+".css"
					fs.writeFile(path.join(stylesDest,newFileName),css,"utf8",function(err){
						if(err) console.log(err)
					})
				})
			})

		}


		function objDest(file,dest){
			var stylesDest = path.join(themePath,dest.styles)
			//compile on run
			compile(file,stylesDest)
		}
		function strDest(file,dest){
			var stylesDest = path.join(themePath,dest)
			compile(file,stylesDest)
		}


		//test each file and if in specified src dir then start to compile
		if(testBase == testSrcBase){

			if(typeof buildPaths.dest == "string") strDest(stylRes[s],buildPaths.dest)
			else if(typeof buildPaths.dest == "object") objDest(stylRes[s],buildPaths.dest)

		}
		else{
			console.log(colors.magenta("["+themeName+"] Stylus file ("+fileName+") detected outside of the scope of '"+buildPaths.src.replace(themePath,"")+"' and will not be compiled."))
		}
	}

}
