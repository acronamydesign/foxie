var jade = require("jade"),
		mongoose = require("foxie-mongoose"),
		librariesPath = require("foxie-data").public.libraries,
		api = require("foxie-api"),
		api = {
			loadModel:api.connection.loadModel,
			queryGate:api.connection.queryGate
		}

var schema = {
	libraries:api.loadModel("foxie-libraries","libraries.model.js")
}

module.exports = function(libraries){

	var saveObj = {}
	var i = 0
	var data = require("foxie-data").libraries,
			dataConcat = [],
			readyData = []

	//establish the lenth of the libraries items
	for(d in data){
		for(i in data[d]){
			dataConcat.push(data[d][i])
		}
	}
	var dataLen = dataConcat.length;

	schema.libraries.find({},function(err,res){
		if(err) console.log(err)
		if(res.length == 0){ //if no results then save loop
			console.log("now saving initial library results")
			loopSave("save")
		}
		else{
			mongoose.connection.db.dropCollection('libraries', function(err, result) {
				if(err) console.log(err)
				loopSave("update")
			});
		}
	})


	function loopSave(mode){

		for(l in libraries){

			for(i in libraries[l]){
				var file = libraries[l][i],
					ext = file.split("/").pop()
					//font types
					if(/\.eot/.test(ext)) file = jade.compile("link(href='/libraries/"+file.replace(librariesPath,"")+"' rel='stylesheet' type='text/css' )")()
					if(/\.ttf/.test(ext)) file = jade.compile("link(href='/libraries/"+file.replace(librariesPath,"")+"' rel='stylesheet' type='text/css' )")()
					if(/\.woff/.test(ext)) file = jade.compile("link(href='/libraries/"+file.replace(librariesPath,"")+"' rel='stylesheet' type='text/css' )")()
					if(/\.svg/.test(ext)) file = jade.compile("link(href='/libraries/"+file.replace(librariesPath,"")+"' rel='stylesheet' type='text/css' )")()
					//js
					if(/\.js/.test(ext)) file = jade.compile("script(src='/libraries/"+file.replace(librariesPath,"")+"')")()
					//css
					if(/\.css/.test(ext)) file = jade.compile("link(href='/libraries/"+file.replace(librariesPath,"")+"' rel='stylesheet' type='text/css' )")()

					saveObj.library = l
					saveObj.file = ext
					saveObj.type = ext.split(".").pop()
					saveObj.compile = file
					saveObj.path = libraries[l][i]
					saveObj.state = true

					var library = new schema.libraries(saveObj)

					readyData.push(library)

					if(mode == "save"){
						library.save(function(err){
							if(err) console.log(err)
						})
					}
					else{
						library.save(function(err){
							if(err) console.log(err)
						})
					}
			}
		}
	}
}
