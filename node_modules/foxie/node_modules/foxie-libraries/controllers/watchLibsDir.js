var recurse = require("recursive-readdir"),
		data = require("foxie-data"),
		path = require("path"),
		async = require("async"),
		api = require("foxie-api")
		api = {
			saveData:api.data.extend
		}


module.exports = function(__path){

	recurse(__path,function(err,res){

		var tmpArr = []
		var keys = []

		res.forEach(function(res){
			var libName = res.replace(__path+"/","").split("/")[0];
			keys.push(libName)
			delete keys[keys.indexOf("overides.json")]
			keys = keys.filter(function(item, pos) {
				return keys.indexOf(item) == pos;
			})
		})

		//use keys
		for(k in keys){
				tmpArr[keys[k]] = []

			for(r in res){//group files into the lib they belong to
				if(res[r].replace(__path+"/","").split("/")[0] == keys[k]) tmpArr[keys[k]].push(res[r])
			}
		}

		var overides = require(data.public.libraries+"/overides.json")

		//narrow down
		for(lib in tmpArr){
			var libArr = tmpArr[lib]
			for(item in libArr){

				if(overides[lib]){// overides behavior
					if(overides[lib].include){
						for(i in overides[lib].include){
							var reg = new RegExp(overides[lib].include[i])
							if(!reg.test(libArr[item])) delete libArr[item]//delete non matches
						}
					}
					if(overides[lib].ignore){
						for(i in overides[lib].ignore){
							var reg = new RegExp(overides[lib].ignore[i])
							if(reg.test(libArr[item])) delete libArr[item]//delete non matches
						}
					}
					if(overides[lib].compressed){
						var reg = new RegExp(".min")
						if(!reg.test(libArr[item])) delete libArr[item]//delete non matches
					}
					else if(!overides[lib].compressed){
						var reg = new RegExp(".min")
						if(reg.test(libArr[item])) delete libArr[item]//delete non matches
					}
				}
				else{//no overides use default
					if(/src/.test(libArr[item])) delete libArr[item] //del if has src in the path
					if(!/dist/.test(libArr[item])) delete libArr[item] //del if dosnt have dist in the path
					if(/.min/.test(libArr[item])) delete libArr[item] //del if is minified
					if(/map/.test(libArr[item])) delete libArr[item] //del if is a map
					//Special key words we dont need
					if(/npm/.test(libArr[item])) delete libArr[item]
					if(/bootstrap-theme/.test(libArr[item])) delete libArr[item]
					//we are likely to have the files we need now lets check overides
				}
			}
			libArr = libArr.filter(Boolean) //clear up delete gaps

		api.saveData("libraries",lib,libArr)
		}
		require("./orderLibs")(data.libraries)
		require("./formatLibs.js")(data.libraries)
	})
}

//OVERIDES JSON USAGE
//{
//	"greensock":{
//		"include":["src","uncompressed"],
//		"ignore":[
//			"plugins",
//			"easing",
//			"utils",
//			"TimelineLite.js",
//			"TweenLite.js"
//		],
//		"compressed":false
//	},
//	"color-thief":{
//		"include":["src"]
//	},
//	"load":{
//		"jquery":1
//	}
//}
