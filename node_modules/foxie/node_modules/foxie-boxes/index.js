var data = require("foxie-data"),
		util = require('util'),
		fs = require("fs"),
		vm = require('vm'),
		promise = require("bluebird"),
		api = require("foxie-api"),
		colors = require("colors"),
		api = {
			htmlEL:api.template.htmlEl,
		}

promise.promisifyAll(fs)

//TODO impliment some form of caching or swithing and save to database, maybe use if and queryGate, this should speed things up
//Validate the output and throw a helpfull error if settings are setup wrong
//improve this file with async or promises and modularize it

function $class(path,themeName){
	this.path = path
	this.vmVars = {
		box:[],
		wrapper:[],
		classes:[],
		mixin:[],
		build:undefined,
		stylesheets:undefined,//user defined array
		libraries:undefined,//user defined array
		scripts:undefined,//user defined array
	}
	var vmVars = this.vmVars;
	this.parseBox = function(){
		this.promise
	}
	this.promise = fs.readFileAsync(this.path,"utf8")
	.then(function(res){
		vm.createContext(vmVars);
		vm.runInContext(res, vmVars);
		return vmVars;
	})
	.then(function(themeBoxesRes){
		//console.log(themeBoxesRes)
		//make a storage facility for boxes
		var tempObj = {}
		tempObj[themeName] = {}
		var boxDefinitions = Object.keys(themeBoxesRes.box);
		require("./controller/compile.js")(boxDefinitions,themeBoxesRes,tempObj,themeName)
		require("./controller/themeAssets.js")(themeBoxesRes,themeName)
		return tempObj;
	}).then(function(boxesReady){
		require("./controller/save/saveBoxes.js")(boxesReady,themeName)
	})
	.catch(function(err){
		if(err) console.log(err)
	})
}

for(i in data.themes.default){
	var themeName = data.themes.default[i],
			themePath = data.public.themes+"/"+themeName,
			settingsFile = themePath+"/"+data.themes.conf_file
	inst = new $class(settingsFile,themeName)
	inst.parseBox()
}
