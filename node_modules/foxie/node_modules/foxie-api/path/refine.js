//Usage:
/*
	require("DIRNAME WHERE")(path.resolve(__dirname,"../"),{
		output:"array" or "object"
		mode:"folder",
		transform:require file to modify the output
		ignore:["actions"],
		key:
	},function(result){
		console.log(result)
	})
*/


var fs = require("fs"),
		promise = require("bluebird");

function $class(){
	this.call = function(__path,conf,cb){
		this.path = __path;
		this.cb = cb;
		this.conf = conf;
		this.readdir;
	}
	this.$ = {
		cb:null,
		path:null,
		get readdir(){
			fs.readdir(this.path,this.readcb)
		},
		readcb:function(err,res){
			if(err) this.error = err
			this.res = res;
			this.ignore;
		},
		get ignore(){
			var ignore = this.conf.ignore;
			var result = this.res;
			for(i in ignore){
				delete result[result.indexOf(ignore[i])]
			}
			this.res = result.filter(Boolean);
			this.filter;
		},
		get filter(){
			var mode = this.conf.mode;
			var result = this.res;
			var filter;
			if(mode=="folder"||mode=="dir") filter = true;
			if(mode=="file"||mode=="files") filter = false;
			if(filter){
				for(r in result){
					if(/\./.test(result[r])) delete result[r]
				}
			}
			else{
				for(r in result){
					if(!/\./.test(result[r])) delete result[r]
				}
			}
			this.res = this.res.filter(Boolean);
			this.maincb;
		},
		get maincb(){
			if(this.conf.format=="object"){
				this.vesal = {}
				if(this.conf.key) this.vesal[this.conf.key] = {}
				var result = this.res;
				for(r in result){
					var key = result[r];
					if(this.conf.key) this.vesal[this.conf.key][key] = this.path+"/"+key;
					else this.vesal[key] = this.path+"/"+key;
				}
				this.cb(this.err,this.vesal)
			}
			else{
				this.cb(this.err,this.res)
			}
		}
	}
	this.call = this.call.bind(this.$)
	this.$.readcb = this.$.readcb.bind(this.$)
}
var fn = new $class()

module.exports = fn;
