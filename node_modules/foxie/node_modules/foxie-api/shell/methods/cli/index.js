var prompt = require("prompt"),
		colors = require("colors"),
		path = require("path"),
		fs = require("fs")
//prompt.colors = false;
prompt.start();

var schema = {
	properties:{
		name:{
			required:true
		},
		description:{
			required:true,
		},
		nth:{
			required:true,
			description:"How many methods?",
			type:"number",
			default:1,
			conform:function(value){
				schema.properties.method.maxItems = value
				return value
			}
		},
		method:{
			description:"Name of method",
			required:true,
			type:"array",
			minItems:1,
			maxItems:3,
		}
	}
}

function newMethod(){
	this.new = function(){
		console.log("Starting the comand factory, use this step by step to register and create a template for your new command.".green+"\n")

		//conf
		prompt.message = "Command".yellow;

		prompt.get(schema, function(err,result){
			//console.log(result)

			var methodSchema = {properties:{}}
			var allMethods = result.method
			for(method in allMethods){
				methodSchema.properties[allMethods[method]] = {
					required:true,
					type:"string",
					description:allMethods[method].yellow+":"+" help text".grey,
				}
			}
			//Seemless part 2
			prompt.message = "Method".cyan;
			prompt.get(methodSchema,function(err,result2){

				//splice results
				var methodList = result2
				for(help in methodList){
					var methodInd = result.method.indexOf(help)
					result.method[methodInd] = {
						fn:help,
						description:methodList[help]
					}
				}
				//use result to build dirs and register stuff in json
				var command = {
					name:result.name,
					helpText:result.description,
					medthodLen:result.nth,
					methods:result.method
				}

				var newCommandPath = path.resolve(__dirname,"../"+command.name)

				//build methods for js
				var methodStr = []
				var methodCaller = command.methods
				for(method in methodCaller){
					var code = "\tthis."+ methodCaller[method].fn +" = function(){\n"
										+"\t\t//Code for "+methodCaller[method].fn+" goes here.\n"
										+"\t}\n"
					methodStr.push(code)
				}

				//compile methods
				var jsFile = "function "+command.name+"(){\n"
						+ methodStr.join("")
						+"}\n"
						+"var "+command.name+" = new "+command.name+"()\n"
						+"module.exports = "+command.name+";";

				var jsonFile = {}
				jsonFile["description"] = command.helpText
				jsonFile["mainProc"] = command.name
				jsonFile["method"] = {}
				for(method in methodCaller){
					jsonFile["method"][methodCaller[method].fn] = {
						fn:methodCaller[method].fn,
						help:methodCaller[method].description
					}
				}

				var jsonFile = JSON.stringify(jsonFile,null,"\t")

				fs.mkdir(newCommandPath, function(err){
					if(err) console.log(err)
					fs.writeFile(newCommandPath+"/index.js",jsFile,function(err){
						if(err) console.log(err)
					});
					fs.writeFile(newCommandPath+"/meta.json",jsonFile,function(err){
						if(err) console.log(err)
					})
				});

			})

		})
	}
	this.remove = function(){
		console.log("this command is not supported yet")
	}
}

newMethod = new newMethod()

module.exports = newMethod;
